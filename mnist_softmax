from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import sys
from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
import urllib.request


FLAGS = None
def main(_):
    mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot = True)

    x = tf.placeholder(tf.float32, [None, 784])
    #W = tf.Variable(tf.zeros([784,10]))
    W = tf.Variable(tf.truncated_normal([784,10],stddev=0.1))
    b = tf.Variable(tf.zeros([10]))
    y = tf.matmul(x,W) + b
    y_ = tf.placeholder(tf.float32,[None, 10])
    cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_*tf.log(tf.nn.softmax(y)), reduction_indices=[1]))
    train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

    sess = tf.InteractiveSession()
    tf.global_variables_initializer().run()
    for _ in range(3000):
        batch_xs ,batch_ys = mnist.train.next_batch(100)
        sess.run(train_step,{x:batch_xs,y_:batch_ys})

    correct_prediction = tf.equal(tf.arg_max(y,1),tf.arg_max(y_,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    print(sess.run(accuracy, feed_dict = {x: mnist.test.images, y_:mnist.test.labels}))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_dir', type = str, default = r'D:/tmp/mnist/input_data', help = 'Directory for storing input data')
    FLAGS, unparsed = parser.parse_known_args()
    tf.app.run(main = main,argv = [sys.argv[0]] + unparsed)
